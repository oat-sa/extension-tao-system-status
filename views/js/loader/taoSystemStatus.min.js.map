{"version":3,"mappings":"AACAA,yKACA,iCACAC,6DACA,uIAUA,MAPAC,iGACAC,wLACA,6BACAC,qEACAA,8GACAC,sCACAH,mCACAA,MACA,KCEAF,sDACA,SACA,SACA,OACA,eACA,WACA,KACA,mCACA,aAyDA,uBACA,mDACA,CAQA,yBAwBA,0BACA,6BACA,8BACAM,aACAC,MACAC,mGACA,EACAC,MACAC,GACAC,MACAC,uCACA,EACAC,OACAC,4CACA,CACA,CACA,CACA,CACA,EACA,IAzCAC,OADAC,wCAEAC,OAKAC,oCACAH,QACAC,4CAEAD,mFACAA,mBACAL,0CACA,GACAK,wCAEA,CACA,EA+BA,MAJAI,+DACAF,+BACA,GAEAG,iBACAC,uBACAN,+CACA,GACAM,wBACAN,gBACAA,UACA,GACAO,gBACA,CAvHA,eACAhB,aACAiB,wCACAC,SACAC,SACAC,MACA,EACAnB,MACAC,yGACAE,SACAiB,4BACAC,gBACAC,UACA,EACAC,KACAC,OACAC,QACA,CACA,EACAC,SACArB,QACAsB,oBACA,4CACA,CACA,CACA,EACAzB,MACAC,GACAmB,kBACAlB,MACAC,cACA,EACAC,OACAsB,wBACA,CACA,EACAC,GACAC,SACAxB,OACAsB,oBACA,CACA,CACA,CACA,CACA,EA6EA,cACA,GAEAnC,MC5JA,2DACA,iEACA,8CACA,6CACA,aAEA,OACAsC,iBACA,wBACAC,iDACAA,4BACA,CACA,CACA,GCOAvC,yDACA,aAEA,OACA,cACA,SACA,qCACA,CACA,EACA,uBACA,SACA,8CACA,CACA,CACA,CACA,GClBAA,0DACA,SACA,SACA,OACA,eACA,WACA,KACA,mCACA,aAuDA,uBACA,+CACA,CAEA,yBACA,sDACA,CAQA,mCAwBA,6BAEAwC,WADAC,uBAEAlC,uBAkBA,MAjBAiC,iCACAlC,aACAC,MACAmC,SACA,EACAjC,MACAC,GACAC,MACAC,uCACA,EACAC,OACAC,4CACA,CACA,CACA,CACA,CACA,GACA0B,SACA,IA5CAzB,OADAC,wCAEA2B,eAKAzB,oCACAH,QACAC,4CAEAD,mFACAA,mBACAL,0CACA,GACAK,uCAEA,CACA,EAiCA,MAJAI,2DACAwB,uCACA,GAEAvB,yBACAC,uBACAF,6CACAJ,+CAEA,GACAM,wBACAF,sCACAJ,gBACAA,UACA,GACAO,gBACA,CA9HA,eACAhB,aACAiB,yBACAC,SACAC,SACAC,MACA,EACAnB,MACAG,SACAiB,4BACAC,gBACAC,YACAe,OACAC,6BACAC,wCACA,CACA,EACAb,SACArB,QACAsB,oBACA,4CACA,CACA,CACA,EACAzB,MACAC,GACAmB,kBACAlB,MACAC,cACA,EACAC,OACAsB,wBACA,CACA,EACAC,GACAC,SACAxB,OACAsB,oBACA,CACA,CACA,CACA,CACA,EAsFA,wBACA,GAEAnC,MCnKA,kDACA,iEACA,kDACA,yCACA,aAIA,uCACA,kDACA+C,0BACAC,cACAC,eACAC,YACA,GACAF,qBAEAA,oCACAA,wBACA7B,gBACA,EACA,CAfA,eAiBA,OACAmB,iBACA,oBAEAS,sCACAA,+DACA,6EACAI,6BACA,GAEAC,yCACAA,wBAEA,CACA,CACA,GCrCApD","names":["define","helpers","buffer","escapeExpression","helper","stack1","graphConfig","data","url","axis","x","tick","format","label","text","chart","initConfig","graph","refresh","$","component","on","init","bindto","padding","bottom","left","xFormat","mimeType","type","bar","width","ratio","tooltip","title","position","y","inner","start","executionStatistics","newConfig","interval","json","activityGraph","names","amount","average","$container","$modal","startClosed","minWidth","showTaskReport","tasksStatistics"],"sources":["../controller/SystemStatus/reportDetailsModal!tpl","../widgets/executionStatistics.js","../controller/PerformanceMonitoring/index.js","../controller/routes.js","../tasksMonitoring/tasksStatistics.js","../controller/SystemStatus/index.js","module-create.js"],"sourcesContent":["\ndefine('tpl!taoSystemStatus/controller/SystemStatus/reportDetailsModal', ['handlebars'], function(hb){ return hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"modal report-details-modal\\\">\\n    <section>\\n        <h1>\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Task data\", options) : helperMissing.call(depth0, \"__\", \"Task data\", options)))\n    + \"\\n        </h1>\\n        \";\n  if (helper = helpers.data) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.data); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </section>\\n</div>\";\n  return buffer;\n  }); });\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2020 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoSystemStatus/widgets/executionStatistics',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'util/url',\n    'c3'\n], function ($, _, __, component, url, c3) {\n    'use strict';\n\n    /**\n     * Some default config\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        graphConfig : {\n            bindto: '.js-execution-statistics-graph',\n            padding: {\n                bottom: 0,\n                left: 0\n            },\n            data: {\n                url: url.route('executionsStatistics', 'PerformanceMonitoring', 'taoSystemStatus', { 'interval' : getInterval()}),\n                x: 'time',\n                xFormat: '%Y-%m-%d %H:%M:%S',\n                mimeType: 'json',\n                type: 'bar'\n            },\n            bar: {\n                width: {\n                    ratio: 0.7\n                }\n            },\n            tooltip: {\n                format: {\n                    title: function (x, y) {\n                       return new Date(Date.parse(x)).toUTCString();\n                    }\n                }\n            },\n            axis: {\n                x: {\n                    type: 'timeseries',\n                    tick: {\n                        format: '%H:%M'\n                    },\n                    label: {\n                        position: 'bottom center'\n                    }\n                },\n                y: {\n                    inner: true,\n                    label: {\n                        position: 'outer-top',\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get interval to build statistics\n     * @return string\n     */\n    function getInterval() {\n       return $('.js-execution-statistics-interval').val();\n    }\n\n    /**\n     * @param {Object} config\n     * @param {String} [config.graphConfig] - configuration of c3 chart\n     * @param {String} [config.autoRefresh] - interval of auto refresh\n     * @param {String} [config.autoRefreshBar] - show auto refresh bar\n     */\n    function factory(config) {\n        var initConfig = _.merge({}, _defaults, config);\n        var chart;\n        var graph = {\n            /**\n             * Refresh the graph\n             * @param {Object} newConfig\n             */\n            refresh: function refresh(newConfig) {\n                if (chart) {\n                    initConfig = _.merge({}, initConfig, newConfig);\n                    //there is no way to update graph with new config\n                    chart.internal.config.axis_x_tick_format = initConfig.graphConfig.axis.x.tick.format;\n                    chart.axis.labels({\n                        x: initConfig.graphConfig.axis.x.label.text\n                    });\n                    chart.load(initConfig.graphConfig.data);\n                }\n            },\n        };\n        /**\n         * Get chart config\n         * @return {Object}\n         */\n        function getChartConfig() {\n            const interval = getInterval();\n            return _.merge({}, initConfig, {\n                graphConfig: {\n                    data: {\n                        url: url.route('executionsStatistics', 'PerformanceMonitoring', 'taoSystemStatus', { 'interval' : interval }),\n                    },\n                    axis: {\n                        x : {\n                            tick : {\n                                format: interval === 'P1D' ? '%H:%M' : '%m-%d'\n                            },\n                            label : {\n                                text:  interval === 'P1D' ? __('Hours') : __('Days')\n                            }\n                        }\n                    }\n                }\n            });\n        }\n\n\n        $('.js-execution-statistics-interval').on('change', function () {\n            graph.refresh(getChartConfig());\n        });\n\n        return component(graph)\n            .on('render', function() {\n                chart = c3.generate(getChartConfig().graphConfig);\n            })\n            .on('destroy', function() {\n                chart.destroy();\n                chart = null;\n            })\n            .init(initConfig);\n    }\n\n    return factory;\n});\n\n","define('taoSystemStatus/controller/PerformanceMonitoring/index',[\n    'tpl!taoSystemStatus/controller/SystemStatus/reportDetailsModal',\n    'taoSystemStatus/widgets/executionStatistics'\n], function(layout, executionStatisticsFactory) {\n    'use strict';\n\n    return {\n        start : function() {\n            var executionStatistics;\n            executionStatistics = executionStatisticsFactory();\n            executionStatistics.render();\n        }\n    }\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2019 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n *\n */\n\ndefine('taoSystemStatus/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'SystemStatus': {\n            'actions' : {\n                'index' : 'controller/SystemStatus/index'\n            }\n        },\n        'PerformanceMonitoring': {\n            'actions' : {\n                'index' : 'controller/PerformanceMonitoring/index'\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2019 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoSystemStatus/tasksMonitoring/tasksStatistics',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'util/url',\n    'c3'\n], function ($, _, __, component, url, c3) {\n    'use strict';\n\n    /**\n     * Some default config\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        graphConfig : {\n            bindto: '.js-tasks-graph',\n            padding: {\n                bottom: 0,\n                left: 0\n            },\n            data: {\n                x: 'time',\n                xFormat: '%Y-%m-%d %H:%M:%S',\n                mimeType: 'json',\n                type: 'line',\n                names: {\n                    amount: __('Tasks processed'),\n                    average: __('Average processing time, s')\n                }\n            },\n            tooltip: {\n                format: {\n                    title: function (x, y) {\n                       return new Date(Date.parse(x)).toUTCString();\n                    }\n                }\n            },\n            axis: {\n                x: {\n                    type: 'timeseries',\n                    tick: {\n                        format: '%H:%M'\n                    },\n                    label: {\n                        position: 'bottom center'\n                    }\n                },\n                y: {\n                    inner: true,\n                    label: {\n                        position: 'outer-top',\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Get interval to build statistics\n     * @return string\n     */\n    function getInterval() {\n       return $('.js-tasks-statistics-interval').val();\n    }\n\n    function getData(period) {\n        return $('.js-tasks-graph').data('statistics')[period];\n    }\n\n    /**\n     * @param {Object} config\n     * @param {String} [config.graphConfig] - configuration of c3 chart\n     * @param {String} [config.autoRefresh] - interval of auto refresh\n     * @param {String} [config.autoRefreshBar] - show auto refresh bar\n     */\n    function tasksGraphFactory(config) {\n        var initConfig = _.merge({}, _defaults, config);\n        var chart;\n        var activityGraph = {\n            /**\n             * Refresh the graph\n             * @param {Object} newConfig\n             */\n            refresh: function refresh(newConfig) {\n                if (chart) {\n                    initConfig = _.merge({}, initConfig, newConfig);\n                    //there is no way to update graph with new config\n                    chart.internal.config.axis_x_tick_format = initConfig.graphConfig.axis.x.tick.format;\n                    chart.axis.labels({\n                        x: initConfig.graphConfig.axis.x.label.text\n                    });\n                    chart.load(newConfig.graphConfig.data);\n                }\n            }\n        };\n        /**\n         * Get chart config\n         * @return {Object}\n         */\n        function getChartConfig() {\n            var interval = getInterval();\n            var newConfig;\n            var data = getData(interval);\n            newConfig = _.merge({}, _defaults, {\n                graphConfig: {\n                    data: {\n                        json: data\n                    },\n                    axis: {\n                        x : {\n                            tick : {\n                                format: interval === 'P1D' ? '%H:%M' : '%m-%d'\n                            },\n                            label : {\n                                text:  interval === 'P1D' ? __('Hours') : __('Days')\n                            }\n                        }\n                    }\n                }\n            });\n            return newConfig;\n        }\n\n        $('.js-tasks-statistics-interval').on('change', function () {\n            activityGraph.refresh(getChartConfig());\n        });\n\n        return component(activityGraph)\n            .on('render', function() {\n                $('.modal .js-tasks-graph-container').show();\n                chart = c3.generate(getChartConfig().graphConfig);\n\n            })\n            .on('destroy', function() {\n                $('.js-tasks-graph-container').hide();\n                chart.destroy();\n                chart = null;\n            })\n            .init(initConfig);\n    }\n\n    return tasksGraphFactory;\n});\n\n","define('taoSystemStatus/controller/SystemStatus/index',[\n    'tpl!taoSystemStatus/controller/SystemStatus/reportDetailsModal',\n    'taoSystemStatus/tasksMonitoring/tasksStatistics'\n], function(layout, tasksStatisticsFactory) {\n    'use strict';\n\n    var $container;\n\n    function showTaskReport($modalContent) {\n        var $modal = $(layout({data: $modalContent.html()}));\n        $container.append($modal);\n        $modal.modal({\n            startClosed : true,\n            minWidth : 450\n        });\n        $modal.modal('open');\n\n        $modal.on('closed.modal', function() {\n            $modal.modal('destroy');\n            $(this).remove();\n        });\n    }\n\n    return {\n        start : function() {\n            var tasksStatistics;\n\n            $container = $('#system-status-report');\n            $container.on('click', '.js-feedback-details-button', function () {\n                var $modalContent = $(this).closest('.js-report').find('.js-feedback-details');\n                showTaskReport($modalContent);\n            });\n\n            tasksStatistics = tasksStatisticsFactory();\n            tasksStatistics.render();\n\n        }\n    }\n});\n\n","\ndefine(\"taoSystemStatus/loader/taoSystemStatus.bundle\", function(){});\n"]}